/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NUM 1
#define NPD 2
#define FN  3
#define SYS 4

#define SW_LNG &kp LG(SPACE)
#define ST(key) &st1500 key key
#define MOD_TAB(mod) &st mod TAB


&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <200>;
};

&mt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <200>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2 3>;
            then-layer = <4>;
        };
    };

    macros {
        m_rmrl: macro_release_mods_on_release_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_tap &release_alt &release_ctrl &release_shft &release_gui>,
                <&macro_param_1to1>,
                <&macro_release &mo MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        ltt: layer_tog_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <1000>;
            quick-tap-ms = <200>;
            bindings = <&tog>, <&kp>;
        };

        ltrm: layer_tap_release_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&m_rmrl>, <&kp>;
        };

        sk1500: sticky_key_1500ms {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };

        st1500: sticky_tap_1500ms {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-while-undecided;
            hold-while-undecided-linger;
            bindings = <&kp>, <&sk1500>;
        };

        st: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-while-undecided;
            hold-while-undecided-linger;
            bindings = <&kp>, <&kp>;
        };

        press_alt: press_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&none>;
            mods = <(MOD_LALT)>;
        };

        press_ctrl: press_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&none>;
            mods = <(MOD_LCTL)>;
        };

        press_shift: press_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kt LSHFT>, <&none>;
            mods = <(MOD_LSFT)>;
        };

        press_gui: press_gui {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&none>;
            mods = <(MOD_LGUI)>;
        };

        release_alt: release_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LALT>;
            mods = <(MOD_LALT)>;
        };

        release_ctrl: release_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LCTRL>;
            mods = <(MOD_LCTL)>;
        };

        release_shft: release_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LSHFT>;
            mods = <(MOD_LSFT)>;
        };

        release_gui: release_gui {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&none>, <&kt LGUI>;
            mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
ST(LGUI)  &kp GRAVE  &kp Q  &kp W             &kp E        &kp R           &kp T        &kp Y        &kp U         &kp I            &kp O      &kp P          &kp LEFT_BRACKET  &mt RGUI RIGHT_BRACKET
          ST(LCTRL)  &kp A  &kp S             &kp D        &kp F           &kp G        &kp H        &kp J         &kp K            &kp L      &kp SEMICOLON  &mt RCTRL SQT
          ST(LALT)   &kp Z  &kp X             &kp C        &kp V           &kp B        &kp N        &kp M         &kp COMMA        &kp DOT    &kp SLASH      &mt LALT BSLH
                            &ltt 2 LG(SPACE)  ST(LSHIFT)   &ltrm FN SPACE  &lt 1 TAB    &lt 1 ENTER  &lt FN SPACE  &mt RSHIFT BSPC  &ltt 2 DEL
            >;
        };

        numbers {
            bindings = <
&kp LEFT_WIN  &kp F1          &kp F2           &kp F3        &kp F4        &kp F5        &kp F6         &kp F7     &kp F8         &kp F9        &kp F10   &kp F11   &kp F12          &kp RGUI
              &mt LCTRL PLUS  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp N6     &kp N7         &kp N8        &kp N9    &kp N0    &mt RCTRL MINUS
              &mt LALT EQUAL  &kp EXCLAMATION  &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LPAR  &kp RPAR  &mt LALT UNDER
                                          &trans        &trans        &trans        &trans         &trans     &trans         &trans        &trans
            >;
        };

        numpad {
            bindings = <
&kp LEFT_WIN  &none  &none  &none   &none   &none   &none     &kp KP_MULTIPLY  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE  &kp ESCAPE     &mt RGUI KP_NUM
       &kp LCTRL  &none  &none   &none   &none   &none     &kp KP_PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS   &mt RCTRL KP_ENTER
       &kp LALT  &none  &none   &none   &none   &none     &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT     &mt LALT C_AL_CALC
                     &trans  &trans  &trans  &trans    &trans           &trans           &trans           &trans
            >;
        };

        function {
            bindings = <
&kp CAPS  &none  &none     &none          &none      &none      &to DEF       &kp ESC    &kp HOME   &kp UP     &kp END    &kp INSERT  &none    &none
          &none  &kp LWIN  MOD_TAB(LALT)  &kp LCTRL  &kp LSHFT  &sk RALT      &kp BSPC   &kp LEFT   &kp DOWN   &kp RIGHT  &kp DEL     &kp TAB
          &none  &none     &none          SW_LNG     &none      &to FN        &kp ENTER  &kp SPACE  &kp PG_UP  &kp PG_DN  &kp K_APP   &none
                           &trans         &trans     &trans     &trans        &trans     &trans     &trans     &trans
            >;
        };

        system {
            bindings = <
&to 0  &bootloader  &none         &none         &none         &none         &studio_unlock    &studio_unlock  &none         &none         &none         &none         &bootloader  &none
       &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &bt BT_SEL 4    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &sys_reset   &none         &none         &none         &none         &none             &none           &none         &none         &none         &none         &sys_reset
                                  &trans        &trans        &trans        &trans            &trans          &trans        &trans        &trans
            >;
        };
    };
};
